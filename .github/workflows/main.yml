name: Deploy Frontend to AWS EC2 (Self-Hosted Runner)

on:
  push:
    branches:
      - main

env:
  FRONTEND_DOCKER_IMAGE: matteusmoreno/casa-moreno-frontend:latest
  FRONTEND_CONTAINER_NAME: casa-moreno-frontend-container
  FRONTEND_CONTAINER_PORT: 3001
  FRONTEND_HOST_PORT: 3001

  # Variáveis de ambiente para o frontend (Next.js)
  # IMPORTANT: Estas variáveis precisam ser passadas para o contêiner
  # e devem ser configuradas no seu código Next.js para usar process.env.NEXT_PUBLIC_...
  # Substitua 'SEU_IP_PUBLICO_EC2_BACKEND' pelo IP público ou DNS do seu backend na EC2
  # ou pelo endereço do seu Load Balancer, se houver.
  NEXT_PUBLIC_BACKEND_URL: http://casa-moreno-alb-1497417447.us-east-2.elb.amazonaws.com
  NEXT_PUBLIC_BACKEND_HOST_FOR_IMAGES: http://casa-moreno-alb-1497417447.us-east-2.elb.amazonaws.com

jobs:
  # Job 1: Builda a imagem Docker e envia para o Docker Hub
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.FRONTEND_DOCKER_IMAGE }}

  # Job 2: Deploy direto na instância EC2 usando Self-Hosted Runner
  deploy-to-ec2:
    runs-on: self-hosted # <--- USA O MESMO RUNNER NA EC2
    needs: build-and-push

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub from EC2 Runner
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Stop and Remove Old Container
        run: |
          echo "Stopping and removing old container '${{ env.FRONTEND_CONTAINER_NAME }}'..."
          docker stop ${{ env.FRONTEND_CONTAINER_NAME }} || true
          docker rm ${{ env.FRONTEND_CONTAINER_NAME }} || true

      - name: Pull New Docker Image
        run: |
          echo "Pulling new image '${{ env.FRONTEND_DOCKER_IMAGE }}'..."
          docker pull ${{ env.FRONTEND_DOCKER_IMAGE }}

      - name: Run New Docker Container
        run: docker run -d \
          --name "${{ env.FRONTEND_CONTAINER_NAME }}" \
          -p "${{ env.FRONTEND_HOST_PORT }}":"${{ env.FRONTEND_CONTAINER_PORT }}" \
          --restart always \
          -e NEXT_PUBLIC_BACKEND_URL="${{ env.NEXT_PUBLIC_BACKEND_URL }}" \
          -e NEXT_PUBLIC_BACKEND_HOST_FOR_IMAGES="${{ env.NEXT_PUBLIC_BACKEND_HOST_FOR_IMAGES }}" \
          "${{ env.FRONTEND_DOCKER_IMAGE }}"

      - name: Clean up old Docker images (opcional)
        run: |
          echo "Cleaning up old Docker images..."
          docker image prune -f