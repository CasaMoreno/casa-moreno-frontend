name: Deploy Frontend to AWS EC2 (Self-Hosted Runner) - Debug

on:
  push:
    branches:
      - main 

env:
  FRONTEND_DOCKER_IMAGE: matteusmoreno/casa-moreno-frontend:latest
  FRONTEND_CONTAINER_NAME: casa-moreno-frontend-container
  FRONTEND_CONTAINER_PORT: 3001
  FRONTEND_HOST_PORT: 3001
  NEXT_PUBLIC_BACKEND_URL: http://casa-moreno-backend-container:8085
  NEXT_PUBLIC_BACKEND_HOST_FOR_IMAGES: https://www.casa-moreno.com

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.FRONTEND_DOCKER_IMAGE }}

  deploy-to-ec2:
    runs-on: self-hosted
    needs: build-and-push
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Login to Docker Hub from EC2 Runner
        run: |
          echo "DEBUG: Attempting Docker login for user: ${{ secrets.DOCKERHUB_USERNAME }}"
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          echo "DEBUG: Docker login command executed."

      - name: Create Docker Network
        run: docker network create casa-moreno-net || true

      - name: Stop and Remove Old Container
        run: |
          echo "DEBUG: Checking for existing container '${{ env.FRONTEND_CONTAINER_NAME }}' to stop and remove..."
          docker stop ${{ env.FRONTEND_CONTAINER_NAME }} || true
          docker rm ${{ env.FRONTEND_CONTAINER_NAME }} || true
          echo "DEBUG: Old container stop/remove commands executed."
      - name: Pull New Docker Image
        run: |
          echo "DEBUG: Attempting to pull new image: ${{ env.FRONTEND_DOCKER_IMAGE }}"
          docker pull ${{ env.FRONTEND_DOCKER_IMAGE }}
          echo "DEBUG: Docker pull command executed. Image ID on runner: $(docker images -q ${{ env.FRONTEND_DOCKER_IMAGE }})"
      - name: Run New Docker Container
        run: |
          echo "DEBUG: Preparing to run new container '${{ env.FRONTEND_CONTAINER_NAME }}'."
          echo "DEBUG: Using image: '${{ env.FRONTEND_DOCKER_IMAGE }}'"
          echo "DEBUG: Mapped port: ${{ env.FRONTEND_HOST_PORT }}:${{ env.FRONTEND_CONTAINER_PORT }}"
          echo "DEBUG: Backend URL: ${{ env.NEXT_PUBLIC_BACKEND_URL }}"
          echo "DEBUG: Backend Host for Images: ${{ env.NEXT_PUBLIC_BACKEND_HOST_FOR_IMAGES }}"
          
          docker run -d \
            --name "${{ env.FRONTEND_CONTAINER_NAME }}" \
            --network=casa-moreno-net \
            -p "${{ env.FRONTEND_HOST_PORT }}":"${{ env.FRONTEND_CONTAINER_PORT }}" \
            --restart always \
            -e NEXT_PUBLIC_BACKEND_URL="${{ env.NEXT_PUBLIC_BACKEND_URL }}" \
            -e NEXT_PUBLIC_BACKEND_HOST_FOR_IMAGES="${{ env.NEXT_PUBLIC_BACKEND_HOST_FOR_IMAGES }}" \
            "${{ env.FRONTEND_DOCKER_IMAGE }}"

          echo "DEBUG: Docker run command executed."
          echo "DEBUG: Active containers after run: $(docker ps --format "{{.Names}}")"
      - name: Clean up old Docker images (opcional)
        run: |
          echo "DEBUG: Cleaning up old Docker images..."
          docker image prune -f
          echo "DEBUG: Docker image prune executed."